@using System.Globalization
@using System.Linq

<div class="flex items-center">
    <h2 class="flex-auto text-sm font-semibold text-gray-900">@SelectedMonth.ToString("MMMM yyyy")</h2>
    <button type="button" class="-my-1.5 flex flex-none items-center justify-center p-1.5 text-gray-400 hover:text-gray-500" @onclick="PreviousMonth">
        <span class="sr-only">Previous month</span>
        <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
            <path fill-rule="evenodd" d="M12.79 5.23a.75.75 0 01-.02 1.06L8.832 10l3.938 3.71a.75.75 0 11-1.04 1.08l-4.5-4.25a.75.75 0 010-1.08l4.5-4.25a.75.75 0 011.06.02z" clip-rule="evenodd" />
        </svg>
    </button>
    <button type="button" class="-my-1.5 -mr-1.5 ml-2 flex flex-none items-center justify-center p-1.5 text-gray-400 hover:text-gray-500" @onclick="NextMonth">
        <span class="sr-only">Next month</span>
        <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
            <path fill-rule="evenodd" d="M7.21 14.77a.75.75 0 01.02-1.06L11.168 10 7.23 6.29a.75.75 0 111.04-1.08l4.5 4.25a.75.75 0 010 1.08l-4.5 4.25a.75.75 0 01-1.06-.02z" clip-rule="evenodd" />
        </svg>
    </button>
</div>

<div class="mt-10 grid grid-cols-7 text-center text-xs leading-6 text-gray-500">
    <div>M</div>
    <div>T</div>
    <div>W</div>
    <div>T</div>
    <div>F</div>
    <div>S</div>
    <div>S</div>
</div>

<div class="mt-2 grid grid-cols-7 text-sm">
    @foreach (var day in CalendarDays)
    {
        <div class="py-2">
            <button type="button"
                    class="@GetDayButtonClass(day.date, day.gray)"
                    @onclick="(() => SelectDate(day.date))"
                    disabled="@(!IsDateSelectable(day.date))">
                <time datetime="@day.date.ToString("yyyy-MM-dd")">@day.date.Day</time>
            </button>
        </div>
    }
</div>

@code {
    private DateTime SelectedMonth = DateTime.Today;
    private DateTime? SelectedDate = null;
    private List<(DateTime date, bool gray)> CalendarDays;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        GenerateCalendarDays();
    }

    private void GenerateCalendarDays()
    {
        var firstDayOfMonth = new DateTime(SelectedMonth.Year, SelectedMonth.Month, 1);
        var daysInMonth = DateTime.DaysInMonth(SelectedMonth.Year, SelectedMonth.Month);
        var startDayOfWeek = (int)firstDayOfMonth.DayOfWeek;
        var daysFromPreviousMonth = startDayOfWeek == 0 ? 6 : startDayOfWeek - 1; // Adjust for Sunday being DayOfWeek 0

        var previousMonth = SelectedMonth.AddMonths(-1);
        var nextMonth = SelectedMonth.AddMonths(1);

        var previousMonthDays = Enumerable.Range(0, daysFromPreviousMonth)
                                           .Select(offset => firstDayOfMonth.AddDays(-offset))
                                           .Reverse()
                                           .Select(date => (date, gray: true));

        var currentMonthDays = Enumerable.Range(0, daysInMonth)
                                          .Select(offset => firstDayOfMonth.AddDays(offset))
                                          .Select(date => (date, gray: false));

        var nextMonthDays = Enumerable.Range(0, 42 - (daysFromPreviousMonth + daysInMonth))
                                      .Select(offset => firstDayOfMonth.AddDays(daysInMonth + offset))
                                      .Select(date => (date, gray: true));

        CalendarDays = previousMonthDays.Concat(currentMonthDays).Concat(nextMonthDays).ToList();
    }

    private void PreviousMonth()
    {
        SelectedMonth = SelectedMonth.AddMonths(-1);
        GenerateCalendarDays();
        SelectedDate = null;
    }

    private void NextMonth()
    {
        SelectedMonth = SelectedMonth.AddMonths(1);
        GenerateCalendarDays();
        SelectedDate = null;
    }

    private bool IsDateSelectable(DateTime date)
    {
        return date >= DateTime.Today;
    }

    private string GetDayButtonClass(DateTime date, bool gray)
    {
        var classes = new List<string>
        {
            "mx-auto", "flex", "h-8", "w-8", "items-center", "justify-center", "rounded-full",
            gray ? "text-gray-600" : "text-gray-900",
            date == DateTime.Today ? "font-semibold" : "",
            date == SelectedDate ? "bg-indigo-600 text-white" : "",
            IsDateSelectable(date) ? "hover:bg-indigo-300" : "text-gray-400",
        };

        return string.Join(" ", classes);
    }

    [Parameter]
    public EventCallback<DateTime> OnDateSelected { get; set; }

    private async Task SelectDate(DateTime date)
    {
        if (IsDateSelectable(date))
        {
            SelectedDate = date;
            await OnDateSelected.InvokeAsync(date);
            await InvokeAsync(StateHasChanged);
        }
    }
}
