@typeparam T

<div>
    <label for="start-date" class="block text-sm font-medium leading-6 text-gray-900">Start Date</label>
    <div class="relative mt-2 rounded-md shadow-sm">
        <input @oninput="(val) => OnInput(val.Value!.ToString()!)" value="@selection?.ToString()" type="@InputType" class="block w-full rounded-md border-0 py-1.5 pr-10 @(issues.Any() ? "text-red-900 ring-red-300 placeholder:text-red-300 focus:ring-red-500" : "") ring-1 ring-inset focus:ring-2 focus:ring-inset sm:text-sm sm:leading-6" placeholder="@Placeholder" aria-invalid="@issues.Any()" aria-describedby="error">
        @if (issues.Any())
        {
            <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-3">
                <svg class="h-5 w-5 text-red-500" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                    <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-5a.75.75 0 01.75.75v4.5a.75.75 0 01-1.5 0v-4.5A.75.75 0 0110 5zm0 10a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd" />
                </svg>
            </div>
        }
    </div>
    @foreach (var issue in issues)
    {
        <p class="mt-2 text-sm text-red-600" id="error">@issue</p>
    }
</div>

@code {
    private T? selection;
    private List<string> issues = new();

    [Parameter]
    public string Label { get; set; } = string.Empty;

    [Parameter]
    public string InputType { get; set; } = "text";

    [Parameter]
    public string Placeholder { get; set; } = string.Empty;

    [Parameter]
    public Dictionary<Func<bool, T>, string> Conditions { get; set; } = new();

    private void OnInput(string input)
    {
        StateHasChanged();
    }


    private List<string> Validate()
    {
        foreach (var condition in Conditions)
        {

        }
        return issues;
    }
}
